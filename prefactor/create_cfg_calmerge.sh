#!/bin/bash



#######################################
##   DEFINE GENERATE CONFIG FILE
#######################################
generate_parset(){

	local parsetfile=$1
	local datadir=$2
	local inputfile=$3
	local outputdir=$4
	local nproc_per_node=$5
	local nthreads=$6

	echo "INFO: Creating parset config file $parsetfile ..."
	(

		echo "##########################################################"
		echo "### Pre-Facet Calibrator Calibration Pipeline (STEP 2) ###"
		echo "##########################################################"
		echo ""
		
		echo "### parameters you will need to adjust."
		echo ""
		
		echo "# averaging for the calibrator data"
		echo "! avg_timestep         = 2   # averaging step needed to average the data to 4 seconds time resolution"
		echo "! avg_freqstep         = 2   # averaging step needed to average the data to 4 ch/SB frequency resolution"

		echo ""		
		
		echo "# where to find the calibrator data"
		echo "! cal_input_path       = $datadir"
		echo "! cal_input_pattern    = $inputfile"

		echo "# Path to the skymodels for the Calibrator"
		echo "! calibrator_path_skymodel  = /usr/share/prefactor/skymodels/"
		
		echo ""

		echo "# where to put the inspection plots generated by the pipeline"
		echo "! inspection_directory = $outputdir/cal_inspection/"

		echo ""

		echo "# where to put the files with the calibration values that are to be transferred to the target"
		echo "! cal_values_directory = $outputdir/cal_values/"
	
		echo ""

		echo "# NDPPP-compatible pattern for baselines or stations to be flagged"
		echo "! flag_baselines         = [ CS013HBA*  ]"

		echo ""
		
		echo "# name of the station that will be used as a reference for the phase-plots"
		echo "! reference_station      = CS001HBA0"


		echo "# pathes to the scripts etc."
		echo "# #### ToDo: get the scripts onto CEP3 and adjust the pathes here!"
		echo "! calib_cal_parset          = /usr/share/prefactor/parsets/calibcal.parset"
		echo "! find_skymodel_cal_auto    = /usr/lib/prefactor/scripts/find_skymodel_cal.py"
		echo "! losoto_importer           = /usr/lib/prefactor/scripts/losotoImporter.py"
		echo "! fitclock_script           = /usr/lib/prefactor/scripts/fit_clocktec_initialguess_losoto.py"
		echo "! fitamps_script            = /usr/lib/prefactor/scripts/amplitudes_losoto_3.py"
		echo "! plotsols_script           = /usr/lib/prefactor/scripts/examine_npys.py"
		echo "! fit_XYoffset_script       = /usr/lib/prefactor/scripts/find_cal_global_phaseoffset_losoto.py"
		echo "! plotphases_script         = /usr/lib/prefactor/scripts/plot_solutions_all_stations.py"
		echo "! losoto_executable         = /usr/bin/losoto"

		echo ""

		echo "# number of processes to use per step per node"
		echo "! num_proc_per_node        = $nproc_per_node"

		echo ""

		echo "# number of processes to use per step per node for tasks with high i/o (dppp or cp) or memory (eg calibration)"
		echo "! num_proc_per_node_limit  = $nproc_per_node"

		echo ""
		
		echo "# number of threads per process for NDPPP"
		echo "! max_dppp_threads         = $nthreads"

		echo ""

		echo "# set this to True if you want the pipeline run to continue if single bands fail"
		echo "! error_tolerance           =  False"
	
		echo ""

		echo "### Stuff that you probably don't need to modify"
		echo "# which steps to run"
		echo "pipeline.steps=[createmap_cal, h5_imp_cal_map, h5imp_cal, mk_inspect_dir, copy_h5imp_cal, fitclock, ampl, plots, phase, plot_cal_phases, createmap_cal_pngs, copy_cal_pngs, mk_cal_values_dir, createmap_cal_npys, copy_cal_npys]"

		echo ""

		echo "# generate a mapfile of all the calibrator data"
		echo "createmap_cal.control.kind            =   plugin"
		echo "createmap_cal.control.type            =   createMapfile"
		echo "createmap_cal.control.method          =   mapfile_from_folder"
		echo "createmap_cal.control.mapfile_dir     =   input.output.mapfile_dir"
		echo "createmap_cal.control.filename        =   createmap_cal.mapfile"
		echo "createmap_cal.control.folder          =   {{ cal_input_path }}"
		echo "createmap_cal.control.pattern         =   {{ cal_input_pattern }}"

		echo ""

		echo "# run NDPPP on the calibrator data"
		echo "ndppp_prep_cal.control.type                    = dppp"
		echo "ndppp_prep_cal.control.max_per_node            = {{ num_proc_per_node_limit }}"
		echo "ndppp_prep_cal.control.error_tolerance         = {{ error_tolerance }}"
		echo "ndppp_prep_cal.argument.numthreads             = {{ max_dppp_threads }}"
		echo "ndppp_prep_cal.argument.msin                   = createmap_cal.output.mapfile    # The input data."
		echo "ndppp_prep_cal.argument.msin.datacolumn        = DATA"
		echo "ndppp_prep_cal.argument.msin.baseline          = CS*&; RS*&; CS*&RS*"
		echo "ndppp_prep_cal.argument.msout.datacolumn       = DATA"
		echo "ndppp_prep_cal.argument.msout.writefullresflag = False"
		echo "ndppp_prep_cal.argument.msout.overwrite        = True ############"
		echo "ndppp_prep_cal.argument.steps                  = [flag,filter,avg,flagamp]"
		echo "ndppp_prep_cal.argument.flag.type              = preflagger"
		echo "ndppp_prep_cal.argument.flag.baseline          = {{ flag_baselines }}"
		echo "ndppp_prep_cal.argument.filter.type            = filter"
		echo "ndppp_prep_cal.argument.filter.baseline        = CS*, RS*&&"
		echo "ndppp_prep_cal.argument.filter.remove          = true                     # fully kick out the international stations."
		echo "ndppp_prep_cal.argument.avg.type               = average"
		echo "ndppp_prep_cal.argument.avg.timestep           = {{ avg_timestep }}       # average to 4 second intervals , PLEASE ADJUST!"
		echo "ndppp_prep_cal.argument.avg.freqstep           = {{ avg_freqstep }}       # average to 2 ch/SB , PLEASE ADJUST!"
		echo "ndppp_prep_cal.argument.flagamp.type           = preflagger"
		echo "ndppp_prep_cal.argument.flagamp.amplmin        = 1e-30"
	
		echo ""

		echo "# combine all entries into one mapfile (just for the find_skymodel_cal_auto script)"
		echo "combine_data_cal_map.control.kind            =   plugin"
		echo "combine_data_cal_map.control.type            =   createMapfile"
		echo "combine_data_cal_map.control.method          =   mapfile_all_to_one"
		echo "combine_data_cal_map.control.mapfile_dir     =   input.output.mapfile_dir"
		echo "combine_data_cal_map.control.filename        =   combine_data_cal_map.mapfile"
		echo "combine_data_cal_map.control.mapfile_in      =   createmap_cal.output.mapfile"

		echo ""

		echo "# find automatically the calibrator used and update the BBS calibration parset"
		echo "sky_cal.control.type               = pythonplugin"
		echo "sky_cal.control.executable         = {{ find_skymodel_cal_auto }}"
		echo "sky_cal.control.error_tolerance    = {{ error_tolerance }}"
		echo "sky_cal.argument.flags             = [combine_data_cal_map.output.mapfile]"
		echo "sky_cal.argument.DirSkymodelCal    = {{ calibrator_path_skymodel }}"

		echo ""

		echo "## extract from the mapfile from sky_cal, the path to the skymodel (used by calib_cal)"
		echo "sky_cal_path.control.kind              =  plugin"
		echo "sky_cal_path.control.type              =  mapfilenamesFromMapfiles"
		echo "sky_cal_path.control.mapfile_FilePath  =  sky_cal.output.SkymodelCal.mapfile"
		
		echo ""

		echo "# now run BBS on the NDPPP-ed calibrator data."
		echo "calib_cal.control.type             =  python-calibrate-stand-alone"
		echo "calib_cal.control.max_per_node     =  {{ num_proc_per_node }}"
		echo "calib_cal.control.error_tolerance  =  {{ error_tolerance }}"
		echo "calib_cal.argument.force           =  True"
		echo "calib_cal.argument.observation     =  ndppp_prep_cal.output.mapfile  # mapfile for the NDPPP-ed calibrator data"
		echo "calib_cal.argument.parset          =  {{ calib_cal_parset }}"
		echo "calib_cal.argument.catalog         =  sky_cal_path.output.FilePath"
	
		echo ""

		echo "# generate a mapfile with all files in a single entry"
		echo "h5_imp_cal_map.control.kind               =  plugin"
		echo "h5_imp_cal_map.control.type               =  createMapfile"
		echo "h5_imp_cal_map.control.method             =  mapfile_all_to_one"
		echo "h5_imp_cal_map.control.mapfile_in         =  createmap_cal.output.mapfile"
		echo "h5_imp_cal_map.control.mapfile_dir        =  input.output.mapfile_dir"
		echo "h5_imp_cal_map.control.filename           =  h5_imp_cal_map.mapfile"
	
		echo ""

		echo "# import all instrument tables into one LoSoTo file"
		echo "h5imp_cal.control.type            =  pythonplugin"
		echo "h5imp_cal.control.executable      =  {{ losoto_importer }}"
		echo "h5imp_cal.control.error_tolerance =  {{ error_tolerance }}"
		echo "h5imp_cal.argument.flags          =  [h5_imp_cal_map.output.mapfile,h5imp_cal_losoto.h5]"
		echo "h5imp_cal.argument.instrument     =  /instrument"
		echo "h5imp_cal.argument.solsetName     =  sol000"
		echo "h5imp_cal.argument.compression    =  7"

		echo ""

		echo "# create the inspection_directory if needed"
		echo "mk_inspect_dir.control.kind               =  plugin"
		echo "mk_inspect_dir.control.type               =  makeDirectory"
		echo "mk_inspect_dir.control.directory          =  {{ inspection_directory }}"
		
		echo ""

		echo "# copy the LoSoTo file to the inspection_directory"
		echo "copy_h5imp_cal.control.kind               =  recipe"
		echo "copy_h5imp_cal.control.type               =  executable_args"
		echo "copy_h5imp_cal.control.executable         =  /bin/cp"
		echo "copy_h5imp_cal.control.mapfile_in         =  h5imp_cal.output.h5parm.mapfile"
		echo "copy_h5imp_cal.control.inputkey           =  source"
		echo "copy_h5imp_cal.control.arguments          =  [source,{{ inspection_directory }}]"
		
		echo ""

		echo "# now run the script that does the clock-TEC fitting"
		echo "fitclock.control.kind             = recipe"
		echo "fitclock.control.type             = executable_args"
		echo "fitclock.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile"
		echo "fitclock.control.executable       = {{ fitclock_script }}"
		echo "# order for arguments is: [<input-filename>,<output-filename-base>,<NumThreads>]"
		echo "fitclock.control.arguments        = [h5gvds,caldata_transfer,{{ num_proc_per_node }}]"
		echo "fitclock.control.inputkey         = h5gvds"

		echo ""

		echo "# now run the script that filters the amplitudes"
		echo "ampl.control.kind             = recipe"
		echo "ampl.control.type             = executable_args"
		echo "ampl.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile"
		echo "ampl.control.executable       = {{ fitamps_script }}"
		echo "# order for arguments is: [<input-filename>,<output-filename-base>,<num-ch/SB>,<subbans-to-flag>]"
		echo "# subbans-to-flag = semicolon-sperated list of integers in double-quotes"
		echo '# e.g.: ampl.control.arguments   = [h5gvds,caldata_transfer,4,"205;206;207"]'
		echo 'ampl.control.arguments        = [h5gvds,caldata_transfer,4,""]'
		echo "ampl.control.inputkey         = h5gvds"

		echo ""

		echo "# and generate some output plots"
		echo "plots.control.kind             = recipe"
		echo "plots.control.type             = executable_args"
		echo "plots.control.mapfile_in       = h5imp_cal.output.h5parm.mapfile"
		echo "plots.control.executable       = {{ plotsols_script }}"
		echo "plots.control.skip_infile      = True"
		echo 'plots.control.arguments        = [caldata_transfer]   # Needs "<output-filename-base>" from the fitclock and ampl steps'

		echo ""

		echo "# fit the phase difference between X and Y"
		echo "phase.control.type            = pythonplugin"
		echo "phase.control.executable      = {{ fit_XYoffset_script }}"
		echo "# order for flags is: [<input-filename>,<output-filename-base>]"
		echo "phase.argument.flags          = [h5imp_cal.output.h5parm.mapfile,caldata_transfer]"

		echo ""

		echo "# plot the phase solutions from the phase-only calibration of the target"
		echo "plot_cal_phases.control.kind                          =  recipe"
		echo "plot_cal_phases.control.type                          =  executable_args"
		echo "plot_cal_phases.control.executable                    =  {{ losoto_executable }}"
		echo "plot_cal_phases.control.max_per_node                  =  {{ num_proc_per_node }}"
		echo "plot_cal_phases.control.parsetasfile                  =  True"
		echo "plot_cal_phases.control.args_format                   =  losoto"
		echo "plot_cal_phases.control.mapfiles_in                   =  [h5imp_cal.output.h5parm.mapfile]"
		echo "plot_cal_phases.control.inputkeys                     =  [hdf5file]"
		echo "plot_cal_phases.argument.flags                        =  [hdf5file]"
		echo "plot_cal_phases.argument.LoSoTo.Steps                 =  [plot]"
		echo "plot_cal_phases.argument.LoSoTo.Solset                =  [sol000]"
		echo "plot_cal_phases.argument.LoSoTo.Soltab                =  [sol000/phase000]"
		echo "plot_cal_phases.argument.LoSoTo.SolType               =  [phase]"
		echo "plot_cal_phases.argument.LoSoTo.ant                   =  []"
		echo "plot_cal_phases.argument.LoSoTo.pol                   =  [XX,YY]"
		echo "plot_cal_phases.argument.LoSoTo.dir                   =  [pointing]"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.Operation  =  PLOT"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.PlotType   =  2D"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.Axes       =  [time,freq]"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.TableAxis  =  [ant]"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.ColorAxis  =  [pol]"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.Reference  =  {{ reference_station }}"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.PlotFlag   =  False"
		echo "plot_cal_phases.argument.LoSoTo.Steps.plot.Prefix     =  {{ inspection_directory }}/cal_phases_"

		echo ""

		echo "# generate a mapfile of all the diagnostic pngs"
		echo "createmap_cal_pngs.control.kind            =   plugin"
		echo "createmap_cal_pngs.control.type            =   createMapfile"
		echo "createmap_cal_pngs.control.method          =   mapfile_from_folder"
		echo "createmap_cal_pngs.control.mapfile_dir     =   input.output.mapfile_dir"
		echo "createmap_cal_pngs.control.filename        =   diagnostic_pngs.mapfile"
		echo "createmap_cal_pngs.control.folder          =   input.output.working_directory/input.output.job_name"
		echo "createmap_cal_pngs.control.pattern         =   *.png"

		echo ""

		echo "# copy the diagnostic pngs to the inspection directory"
		echo "copy_cal_pngs.control.kind               =  recipe"
		echo "copy_cal_pngs.control.type               =  executable_args"
		echo "copy_cal_pngs.control.executable         =  /bin/cp"
		echo "copy_cal_pngs.control.max_per_node       =  {{ num_proc_per_node_limit }}"
		echo "copy_cal_pngs.control.mapfile_in         =  createmap_cal_pngs.output.mapfile"
		echo "copy_cal_pngs.control.inputkey           =  source"
		echo "copy_cal_pngs.control.arguments          =  [source,{{ inspection_directory }}]"
	
		echo ""

		echo "# generate a mapfile of all the diagnostic pdfs"
		echo "createmap_cal_pdfs.control.kind            =   plugin"
		echo "createmap_cal_pdfs.control.type            =   createMapfile"
		echo "createmap_cal_pdfs.control.method          =   mapfile_from_folder"
		echo "createmap_cal_pdfs.control.mapfile_dir     =   input.output.mapfile_dir"
		echo "createmap_cal_pdfs.control.filename        =   diagnostic_pdfs.mapfile"
		echo "createmap_cal_pdfs.control.folder          =   input.output.working_directory/input.output.job_name"
		echo "createmap_cal_pdfs.control.pattern         =   *.pdf"

		echo ""

		echo "# copy the diagnostic pdfs to the inspection directory"
		echo "copy_cal_pdfs.control.kind               =  recipe"
		echo "copy_cal_pdfs.control.type               =  executable_args"
		echo "copy_cal_pdfs.control.executable         =  /bin/cp"
		echo "copy_cal_pdfs.control.max_per_node       =  {{ num_proc_per_node_limit }}"
		echo "copy_cal_pdfs.control.mapfile_in         =  createmap_cal_pdfs.output.mapfile"
		echo "copy_cal_pdfs.control.inputkey           =  source"
		echo "copy_cal_pdfs.control.arguments          =  [source,{{ inspection_directory }}]"

		echo ""

		echo "# create the cal_values_directory if needed"
		echo "mk_cal_values_dir.control.kind               =  plugin"
		echo "mk_cal_values_dir.control.type               =  makeDirectory"
		echo "mk_cal_values_dir.control.directory          =  {{ cal_values_directory }}"
	
		echo ""

		echo "# generate a mapfile of all the cal-value npys"
		echo "createmap_cal_npys.control.kind            =   plugin"
		echo "createmap_cal_npys.control.type            =   createMapfile"
		echo "createmap_cal_npys.control.method          =   mapfile_from_folder"
		echo "createmap_cal_npys.control.mapfile_dir     =   input.output.mapfile_dir"
		echo "createmap_cal_npys.control.filename        =   cal_value_npys.mapfile"
		echo "createmap_cal_npys.control.folder          =   input.output.working_directory/input.output.job_name"
		echo "createmap_cal_npys.control.pattern         =   *.npy"
	
		echo ""

		echo "# copy the cal-value npys to the cal-values directory"
		echo "copy_cal_npys.control.kind               =  recipe"
		echo "copy_cal_npys.control.type               =  executable_args"
		echo "copy_cal_npys.control.executable         =  /bin/cp"
		echo "copy_cal_npys.control.max_per_node       =  {{ num_proc_per_node_limit }}"
		echo "copy_cal_npys.control.mapfile_in         =  createmap_cal_npys.output.mapfile"
		echo "copy_cal_npys.control.inputkey           =  source"
		echo "copy_cal_npys.control.arguments          =  [source,{{ cal_values_directory }}]"

) > $parsetfile

}
## close function



#######################################
##   DEFINE GENERATE CONFIG FILE
#######################################
generate_pipeline(){

	local pipelinefile=$1
	local outputdir=$2
	local nproc_per_node=$3
	

	echo "INFO: Creating pipeline config file $pipelinefile ..."
	(

		echo "[DEFAULT]"
		echo "lofarroot = /usr"
		echo "pythonpath = /usr/lib/python2.7/dist-packages"
		echo "recipe_directories = [%(pythonpath)s/lofarpipe/recipes,/usr/lib/prefactor]"
		echo "task_files = [%(lofarroot)s/share/pipeline/tasks.cfg]"
		echo "runtime_directory = $outputdir/runtime"
		echo "working_directory = $outputdir/working"

		echo ""

		echo "[layout]"
		echo "job_directory = %(runtime_directory)s/%(job_name)s"

		echo ""

		echo "[cluster]"
		echo "clusterdesc = %(lofarroot)s/share/cep2.clusterdesc"

		echo "[deploy]"
		echo "engine_ppath = %(pythonpath)s"
		echo "engine_lpath = %(lofarroot)s/lib"

		echo ""

		echo "[logging]"
		echo "log_file = $outputdir/log/pipeline-%(job_name)s-%(start_time)s.log"
		echo "xml_stat_file = $outputdir/log/pipeline-%(job_name)s-%(start_time)s-statistics.xml"

		echo ""

		echo "[feedback]"
		echo "# Method of providing feedback to LOFAR."
		echo "# Valid options:"
		echo "#    messagebus    Send feedback and status using LCS/MessageBus"
		echo "#    none          Do NOT send feedback and status"
		echo "method = none"

		echo ""
		echo "[remote]"
		echo "method = local"
		echo "max_per_node = $nproc_per_node"
) > $pipelinefile

}
## close generate_pipeline function

######################################
##            MAIN 
######################################

## Get arguments
echo "INFO: Get arguments ..."
PARSETFILE=$1
PIPELINEFILE=$2
DATADIR=$3
INPUTFILE=$4
OUTPUTDIR=$5
NPROC_PER_NODE=$6
NTHREADS=$7

echo "INFO: ARGS={ PARSETFILE=$PARSETFILE, PIPELINEFILE=$PIPELINEFILE, DATADIR=$DATADIR, INPUTFILE=$INPUTFILE, OUTPUTDIR=$OUTPUTDIR, NPROC_PER_NODE=$NPROC_PER_NODE, NTHREADS=$NTHREADS }"

## Generate parset config file
echo "INFO: Creating parset config file $PARSETFILE ..."
generate_parset $PARSETFILE $DATADIR $INPUTFILE $OUTPUTDIR $NPROC_PER_NODE $NTHREADS

## Generate pipeline config file
echo "INFO: Creating pipeline config file $PIPELINEFILE ..."
generate_pipeline $PIPELINEFILE $OUTPUTDIR $NPROC_PER_NODE

echo "INFO: Pre-facet calibrator parset generation for step 2 completed ..."

